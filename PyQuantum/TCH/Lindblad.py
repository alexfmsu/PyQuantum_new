# =================================================== DESCRIPTION =====================================================
# ---------------------------------------------------------------------------------------------------------------------
# ---------------------------------------------------------------------------------------------------------------------
# =================================================== DESCRIPTION =====================================================



# =================================================== EXAMPLES ========================================================
# ---------------------------------------------------------------------------------------------------------------------
# ---------------------------------------------------------------------------------------------------------------------
# =================================================== EXAMPLES ========================================================



# =====================================================================================================================
# system
from math import sqrt
# ---------------------------------------------------------------------------------------------------------------------
# scientific
import numpy as np
# ---------------------------------------------------------------------------------------------------------------------
# PyQuantum.Tools
from PyQuantum.Tools.Matrix import *
# =====================================================================================================================



# =====================================================================================================================
# ---------------------------------------------------------------------------------------------------------------------
# -------------------------------------------------------- OPERATOR_L -------------------------------------------------
# ---------------------------------------------------------------------------------------------------------------------
def operator_a(H):
    size = H.size

    data = lil_matrix((size, size), dtype=np.complex128)

    for k_from, v_from in enumerate(H.states):
        # print('k_from: ', k_from, ', v_from: ', v_from, sep='')
        ph = v_from['ph'][0]

        if ph > 0:
            # print("ph = ", ph)
            # print("from_state = ", v_from)

            to_state = {'ph': [ph - 1], 'at': v_from['at'], 'sink': [v_from['sink'][0]+1]}
            # print("to_state0 = ", to_state)

            for k_to, v_to in enumerate(H.states):
                # print(to_state, v_to)

                if to_state == v_to:
                    # print("to_state = ", to_state)
                    data[k_to, k_from] = sqrt(ph)

    # ---------------------------------------------------------------------------------------------
    # for i in range(H_size):
    #     for j in range(H_size):
    #         if data[i][j] != 0:
    #             print(H.states[j], " -> ", H.states[i], ": ", np.round(data[i][j], 3), sep="")
    # ---------------------------------------------------------------------------------------------

    return Matrix(m=size, n=size, dtype=np.complex128, data=data)
# ---------------------------------------------------------------------------------------------------------------------
# ---------------------------------------------------------------------------------------------------------------------



# ---------------------------------------------------------------------------------------------------------------------
# -------------------------------------------------------- OPERATOR_L -------------------------------------------------
# ---------------------------------------------------------------------------------------------------------------------
def operator_L(ro, lindblad):
    l = lindblad['l']
    L = lindblad['L'].data

    Lcross = L.getH()
    LcrossL = Lcross.dot(L)

    def b(ro):
        nonlocal L, Lcross, LcrossL, l

        L1 = 0
        L2 = 0
        # print(ro.m, ro.n)
        L_ro = Matrix(m=ro.m, n=ro.n, dtype=np.complex128, data=csc_matrix((ro.m, ro.n)))
        # print('type(L_ro):', type(L_ro))
        # exit(0)
        L1 += (L.dot(ro.data)).dot(Lcross)

        L2 = np.dot(ro.data, LcrossL) + np.dot(LcrossL, ro.data)

        L_ro.data += l * csc_matrix(L1 - 0.5 * L2, dtype=np.complex128)

        return L_ro

    return b
# ---------------------------------------------------------------------------------------------------------------------
# ---------------------------------------------------------------------------------------------------------------------
# =====================================================================================================================



# ======================================================== STUFF ======================================================
# ======================================================== STUFF ======================================================
