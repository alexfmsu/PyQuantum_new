# =================================================== DESCRIPTION =====================================================
# ---------------------------------------------------------------------------------------------------------------------
# ---------------------------------------------------------------------------------------------------------------------
# =================================================== DESCRIPTION =====================================================



# =================================================== EXAMPLES ========================================================
# ---------------------------------------------------------------------------------------------------------------------
# ---------------------------------------------------------------------------------------------------------------------
# =================================================== EXAMPLES ========================================================



# =====================================================================================================================
# system
from time import sleep
import csv
# ---------------------------------------------------------------------------------------------------------------------
# scientific
import numpy as np
# ---------------------------------------------------------------------------------------------------------------------
# PyQuantum.TCH
from PyQuantum.TCH.Unitary import Unitary
from PyQuantum.TCH.Lindblad import operator_L
# ---------------------------------------------------------------------------------------------------------------------
# PyQuantum.Tools
from PyQuantum.Tools.Assert import *
# =====================================================================================================================



# =====================================================================================================================
def run(args):
    # -----------------------------------------------------------------------------------------------------------------
    ro_0 = H = None

    T = nt = dt = l = None

    U_csv = x_csv = y_csv = z_csv = None

    thres = None

    T_list = sink_list = None

    sink_limit = None

    in_photons = out_photons = None

    lindblad = args['lindblad']

    if 'in_photons' in args:
        in_photons = args['in_photons']
    if 'out_photons' in args:
        out_photons = args['out_photons']
    # -----------------------------------------------------------------------------------------------------------------
    if 'ro_0' in args:
        ro_0 = args['ro_0']

    Assert(ro_0 is not None, 'param[\'ro_0\'] is not set')
    # -----------------------------------------------------------------------------------------------------------------
    if 'H' in args:
        H = args['H']

    Assert(H is not None, 'param[\'H\'] is not set')
    # -----------------------------------------------------------------------------------------------------------------
    if 'l' in args:
        l = args['l']
    # -----------------------------------------------------------------------------------------------------------------
    if 'T' in args:
        T = args['T']

    if 'dt' in args:
        dt = args['dt']

    if 'nt' in args:
        nt = args['nt']

    if 'sink_limit' in args:
        sink_limit = args['sink_limit']

    if 'precision' in args:
        precision = args['precision']
    else:
        precision = 1e-10
    # -----------------------------------------------------------------------------------------------------------------
    if 'U_csv' in args:
        U_csv = args['U_csv']

    if 'x_csv' in args:
        x_csv = args['x_csv']

    if 'y_csv' in args:
        y_csv = args['y_csv']

    if 'z_csv' in args:
        z_csv = args['z_csv']
    # -----------------------------------------------------------------------------------------------------------------
    if 'thres' in args:
        thres = args['thres']

    if 'T_list' in args:
        T_list = args['T_list']
        T_list.clear()

    if 'sink_list' in args:
        sink_list = args['sink_list']
        sink_list.clear()
    # -----------------------------------------------------------------------------------------------------------------
    Assert(dt is not None, 'param[\'dt\'] is not set')
    # -----------------------------------------------------------------------------------------------------------------
    print("run starts ...")
    # -----------------------------------------------------------------------------------------------------------------
    # UNITARY
    U = Unitary(H, dt)
    U_conj = U.conj()
    # -----------------------------------------------------------------------------------------------------------------
    ro_t = ro_0
    # print('tt:', type(ro_t.data))
    # -----------------------------------------------------------------------------------------------------------------
    states_dim = []

    L_ro = L_out = operator_L(ro_t, args['lindblad']['out'])

    t = 0

    while True:
        # print('-'*100)
        # print(np.round(np.abs(ro_t.data.toarray()), 3))        
        diag_abs = np.abs(ro_t.data.diagonal(), dtype=np.longdouble)
        # print(diag_abs)
        # sleep(1)
        # -----------------------------------------------------------
        # T_list
        if T_list is not None:
            T_list.append(t)
        # -----------------------------------------------------------
        if sink_list is not None:
            sink = np.sum(diag_abs[H.states_sink[1]])
            print(sink)

            if len(sink_list) != 0 and (sink_list[-1] - sink) > precision:
                print("err:", sink, "<", sink_list[-1])
                exit(0)

            sink_list.append(sink)

            if sink_limit is not None:
                if abs(sink_limit - sink) < precision:
                    return False

        # -----------------------------------------------------------------------------------------
        # EVOLUTION
        ro_t.data = ((U.data).dot(ro_t.data + dt * L_ro(ro_t).data)).dot(U_conj.data)

        Assert(abs(1 - ro_t.abs_trace()) <= args['precision'], "ρ(t) is not normed: " + str(ro_t.abs_trace()))
        t += dt
        
        ro_t.print()
        # -----------------------------------------------------------------------------------------

        # -----------------------------------------------------------------------------------------
        # print('tt:', type(ro_t.data))
        # a = ro_t.data
        # a = ro_t.data + dt * L_ro(ro_t).data
        # a = L_ro(ro_t).data
        # print('ss:',type(a))
        # print('tt2:', type(ro_t.data))
        # -----------------------------------------------------------------------------------------

    # ---------------------------------------------------------------------------------------------
    return True
    # ---------------------------------------------------------------------------------------------
# =====================================================================================================================



# ======================================================== STUFF ======================================================
# start_energy = ro_t.energy(H.capacity, H.cavity.n_atoms, H.states_bin, diag_abs)
# start_energy = np.sum(start_energy)
# ---------------------------------------------------------------------------------------------------------------------
# if x_csv is not None:
#     write_x_not_ind(H.states, x_csv)

# if y_csv is not None:
#     write_t(T_str_v(T), nt, y_csv)
# ---------------------------------------------------------------------------------------------------------------------
# if "z_csv" is not None:
#     writer.writerow(["{:.5f}".format(x) for x in diag_abs])
# ---------------------------------------------------------------------------------------------------------------------
# if z_csv is not None:
#     fz_csv.close()
# ---------------------------------------------------------------------------------------------------------------------
# ro_t.normalize()
# ---------------------------------------------------------------------------------------------------------------------
# for i in H.states_sink[1]:
#     sink += diag_abs[i]
# ---------------------------------------------------------------------------------------------------------------------
# if "z_csv" is not None:
#     fz_csv = open("z_csv", "w")

# writer = csv.writer(fz_csv, quoting=csv.QUOTE_NONE, lineterminator="\n")
# ---------------------------------------------------------------------------------------------------------------------
# if U_csv is not None:
#     U.to_csv(args['U_csv'])
# ======================================================== STUFF ======================================================
