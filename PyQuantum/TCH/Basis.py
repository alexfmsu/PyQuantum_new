# =================================================== DESCRIPTION =====================================================
# ---------------------------------------------------------------------------------------------------------------------
# ---------------------------------------------------------------------------------------------------------------------
# =================================================== DESCRIPTION =====================================================



# =================================================== EXAMPLES ========================================================
# ---------------------------------------------------------------------------------------------------------------------
# ---------------------------------------------------------------------------------------------------------------------
# =================================================== EXAMPLES ========================================================



# =====================================================================================================================
# system
from itertools import product
import re
# ---------------------------------------------------------------------------------------------------------------------
# scientific
from numpy import count_nonzero
# =====================================================================================================================



# =====================================================================================================================
def Basis(capacity, n_atoms, n_levels, sink_dim=None):
	l = []

	for i in capacity.keys():
		l.append(range(capacity[i]+1))

	for i in range(n_atoms):
		l.append(range(n_levels))

	if sink_dim is not None:
		for sink_ph_type in sink_dim:
			l.append(range(sink_ph_type+1))

	kwargs = tuple(l)

	permutations = product(*kwargs)

	p = []
	p_list = []

	for i in permutations:
		d = {
			'ph': list(i[:len(capacity.keys())]),
			'at': list(i[len(capacity.keys()):len(capacity.keys())+n_atoms]),
			'sink': list(i[len(capacity.keys())+n_atoms:])
		}

		exist = True

		for k in capacity.keys():
			groups = re.split('<->|-', k)
			groups = sorted(groups)
			groups = [int(i) for i in groups]

			lvl_1 = groups[0]
			lvl_2 = groups[1]
			# print(lvl_1, lvl_2)
			exist = (d['ph'][lvl_1] + d['at'].count(lvl_2) + d['sink'][lvl_1] == capacity[k])

			if not exist:
				break
		
		if exist:
			p.append(d)
			p_list.append([d['ph'], d['at']])
		
	return p, p_list
# =====================================================================================================================
